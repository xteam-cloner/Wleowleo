import platform
from sys import version as pyver

import psutil
from pyrogram import __version__ as pyrover
from pyrogram import filters
from pyrogram.errors import MessageIdInvalid
from pyrogram.types import InputMediaPhoto, Message
from pytgcalls.__version__ import __version__ as pytgver

import config
from AnonXMusic import app
from AnonXMusic.core.userbot import assistants
from AnonXMusic.misc import SUDOERS, mongodb
from AnonXMusic.plugins import ALL_MODULES
from AnonXMusic.utils.database import get_served_chats, get_served_users, get_sudoers
from AnonXMusic.utils.decorators.language import language, languageCB
from AnonXMusic.utils.inline.stats import back_stats_buttons, stats_buttons
from config import BANNED_USERS


@app.on_message(filters.command(["stats", "gstats"]) & filters.group & ~BANNED_USERS)
@language
async def stats_global(client, message: Message, _):
    upl = stats_buttons(_, True if message.from_user.id in SUDOERS else False)
    await message.reply_photo(
        photo=config.STATS_IMG_URL,
        caption=_["gstats_2"].format(app.mention),
        reply_markup=upl,
    )


@app.on_callback_query(filters.regex("stats_back") & ~BANNED_USERS)
@languageCB
async def home_stats(client, CallbackQuery, _):
    upl = stats_buttons(_, True if CallbackQuery.from_user.id in SUDOERS else False)
    await CallbackQuery.edit_message_text(
        text=_["gstats_2"].format(app.mention),
        reply_markup=upl,
    )


@app.on_callback_query(filters.regex("TopOverall") & ~BANNED_USERS)
@languageCB
async def overall_stats(client, CallbackQuery, _):
    # Allow sudo users and owner to use it from anywhere
    if CallbackQuery.from_user.id not in SUDOERS and CallbackQuery.from_user.id != OWNER_ID:
        if CallbackQuery.message.chat.username != "dragbackup":
            return await CallbackQuery.answer(
                "T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ @·¥Ö Ä·¥Ä…¢ ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò.",
                show_alert=True,
            )

    # Fetch necessary stats
    served_chats = len(await get_served_chats())
    served_users = len(await get_served_users())
    assistants_count = len(assistants)
    blocked_users = len(BANNED_USERS)
    modules_count = len(ALL_MODULES)
    sudoers_count = len(SUDOERS)

    # Short message for the pop-up (must be under 200 characters)
    text = (
        f"üìä Overall Stats üìä\n\n"
        f"ü§ñ Assistants: {assistants_count}\n"
        f"üö´ Blocked Users: {blocked_users}\n"
        f"üìå Active Chats: {served_chats}\n"
        f"üõ† Modules: {modules_count}\n"
        f"üëë Sudoers: {sudoers_count}"
    )

    await CallbackQuery.answer(text, show_alert=True)


"""@app.on_callback_query(filters.regex("bot_stats_sudo"))
@languageCB
async def bot_stats(client, CallbackQuery, _):
    if CallbackQuery.from_user.id not in SUDOERS and CallbackQuery.from_user.id != OWNER_ID:
        if CallbackQuery.message.chat.username != "dragbackup":
            return await CallbackQuery.answer(
                "T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ @·¥Ö Ä·¥Ä…¢ ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò.",
                show_alert=True,
            )
        
    p_core = psutil.cpu_count(logical=False)
    t_core = psutil.cpu_count(logical=True)
    ram = str(round(psutil.virtual_memory().total / (1024.0**3))) + " …¢ ô"
    cpu_freq = "“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú"
    hdd = psutil.disk_usage("/")
    total = hdd.total / (1024.0**3)
    used = hdd.used / (1024.0**3)
    free = hdd.free / (1024.0**3)
    call = await mongodb.command("dbstats")
    datasize = call["dataSize"] / 1024
    storage = call["storageSize"] / 1024
    served_chats = len(await get_served_chats())
    served_users = len(await get_served_users())
    
    text = ("<b><u>{0} s·¥õ·¥Ä·¥õs ·¥Ä…¥·¥Ö …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ :</u></b>\n\n<b>·¥ç·¥è·¥Ö·¥ú ü·¥ás :</b> <code>{1}</code>\n<b>·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥ç :</b> <code>{2}</code>\n<b> Ä·¥Ä·¥ç :</b> <code>{3}</code>\n<b>·¥ò ú ès…™·¥Ñ·¥Ä ü ·¥Ñ·¥è Ä·¥ás :</b> <code>{4}</code>\n<b>·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ·¥è Ä·¥ás :</b> <code>{5}</code>\n<b>·¥Ñ·¥ò·¥ú “ì Ä·¥á«´·¥ú·¥á…¥·¥Ñ è :</b> <code>{6}</code>\n\n<b>·¥ò è·¥õ ú·¥è…¥ :</b> <code>{7}</code>\n<b>·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç :</b> <code>{8}</code>\n<b>·¥ò è-·¥õ…¢·¥Ñ·¥Ä ü üs :</b> <code>{9}</code>\n\n<b>s·¥õ·¥è Ä·¥Ä…¢·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á :</b> <code>{10} …¢…™ ô</code>\n<b>s·¥õ·¥è Ä·¥Ä…¢·¥á ·¥ús·¥á·¥Ö :</b> <code>{11} …¢…™ ô</code>\n<b>s·¥õ·¥è Ä·¥Ä…¢·¥á  ü·¥á“ì·¥õ :</b> <code>{12} …¢…™ ô</code>\n\n<b>s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs :</b> <code>{13}</code>\n<b>s·¥á Ä·¥†·¥á·¥Ö ·¥ús·¥á Äs :</b> <code>{14}</code>\n<b> ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs :</b> <code>{15}</code>\n<b>s·¥ú·¥Ö·¥è ·¥ús·¥á Äs :</b> <code>{16}</code>\n\n<b>·¥õ·¥è·¥õ·¥Ä ü ·¥Ö ô s…™·¥¢·¥á :</b> <code>{17} ·¥ç ô</code>\n<b>·¥õ·¥è·¥õ·¥Ä ü ·¥Ö ô s·¥õ·¥è Ä·¥Ä…¢·¥á :</b> <code>{18} ·¥ç ô</code>\n<b>·¥õ·¥è·¥õ·¥Ä ü ·¥Ö ô ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥s :</b> <code>{19}</code>\n<b>·¥õ·¥è·¥õ·¥Ä ü ·¥Ö ô ·¥ã·¥á ès :</b> <code>{20}</code>")
        med = InputMediaPhoto(media=config.STATS_IMG_URL, caption=text)
    try:
        await CallbackQuery.edit_message_media(media=med)
    except MessageIdInvalid:
        await CallbackQuery.message.reply_photo(
            photo=config.STATS_IMG_URL, caption=text)
"""
